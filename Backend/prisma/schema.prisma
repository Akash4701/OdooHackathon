generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum NotificationType {
  QUESTION_CREATED
  ANSWER_CREATED
  COMMENT_CREATED
  MENTION
  BADGE_GRANTED
}

enum BadgeType {
  GOLD
  SILVER
  BRONZE
}

model User {
  id             String         @id @default(cuid())
  name           String
  email          String         @unique
  password       String
  role           Role           @default(USER)
  reputation     Int            @default(0)
  questions      Question[]     @relation("UserQuestions")
  answers        Answer[]       @relation("UserAnswers")
  comments       Comment[]
  votes          Vote[]
  badges         UserBadge[]
  notifications  Notification[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  @@index([email])
}

model Question {
  id               String         @id @default(cuid())
  title            String
  description      String
  author           User           @relation("UserQuestions", fields: [authorId], references: [id])
  authorId         String
  answers          Answer[]
  tags             QuestionTag[]
  votes            Vote[]
  comments         Comment[]
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  @@index([authorId])
}

model Answer {
  id         String     @id @default(cuid())
  content    String
  author     User       @relation("UserAnswers", fields: [authorId], references: [id])
  authorId   String
  question   Question   @relation(fields: [questionId], references: [id])
  questionId String
  votes      Vote[]
  comments   Comment[]
  isAccepted Boolean    @default(false)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@index([questionId])
}

model Comment {
  id         String     @id @default(cuid())
  content    String
  author     User       @relation(fields: [authorId], references: [id])
  authorId   String
  question   Question?  @relation(fields: [questionId], references: [id])
  questionId String?
  answer     Answer?    @relation(fields: [answerId], references: [id])
  answerId   String?
  createdAt  DateTime   @default(now())

  @@check((questionId IS NOT NULL OR answerId IS NOT NULL))
  @@index([authorId])
}

model Vote {
  id         String     @id @default(cuid())
  user       User       @relation(fields: [userId], references: [id])
  userId     String
  question   Question?  @relation(fields: [questionId], references: [id])
  questionId String?
  answer     Answer?    @relation(fields: [answerId], references: [id])
  answerId   String?
  value      Int        // +1 or -1
  createdAt  DateTime   @default(now())

  @@unique([userId, questionId])
  @@unique([userId, answerId])
}

model Tag {
  id         String         @id @default(cuid())
  name       String         @unique
  questions  QuestionTag[]

  @@index([name])
}

model QuestionTag {
  id         String     @id @default(cuid())
  question   Question   @relation(fields: [questionId], references: [id])
  questionId String
  tag        Tag        @relation(fields: [tagId], references: [id])
  tagId      String

  @@unique([questionId, tagId])
}

model Notification {
  id         String           @id @default(cuid())
  user       User             @relation(fields: [userId], references: [id])
  userId     String
  type       NotificationType
  relatedId  String?          // Optional: questionId, answerId, etc.
  message    String
  isRead     Boolean          @default(false)
  createdAt  DateTime         @default(now())

  @@index([userId, isRead])
}

model Badge {
  id         String     @id @default(cuid())
  name       String     @unique
  description String
  type       BadgeType
  users      UserBadge[]
  createdAt  DateTime   @default(now())
}

model UserBadge {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  badge      Badge    @relation(fields: [badgeId], references: [id])
  badgeId    String
  awardedAt  DateTime @default(now())

  @@unique([userId, badgeId])
}